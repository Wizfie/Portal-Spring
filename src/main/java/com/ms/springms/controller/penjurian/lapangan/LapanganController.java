    package com.ms.springms.controller.penjurian.lapangan;

    import com.ms.springms.entity.penjurian.lapangan.DetailEvaluasiLapangan;
    import com.ms.springms.entity.penjurian.lapangan.FaseLapangan;
    import com.ms.springms.entity.penjurian.lapangan.KriteriaLapangan;
    import com.ms.springms.entity.penjurian.lapangan.SubKriteriaLapangan;
    import com.ms.springms.entity.penjurian.lapangan.lapangan.*;
    import com.ms.springms.model.penjurian.HasilEvaluasiDTO;
    import com.ms.springms.model.penjurian.lapangan.DetailEvaluasiLapanganDTO;
    import com.ms.springms.model.penjurian.lapangan.EvaluasiLapanganDTO;
    import com.ms.springms.model.utils.PageResponse;
    import com.ms.springms.service.penjurian.lapangan.LapanganService;
    import com.ms.springms.service.report.ReportEvaluasiService;
    import com.ms.springms.utils.Exceptions.DuplicateEntryException;
    import com.ms.springms.utils.Exceptions.ResourceNotFoundException;
    import org.slf4j.Logger;
    import org.slf4j.LoggerFactory;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.data.domain.Page;
    import org.springframework.data.domain.PageRequest;
    import org.springframework.data.domain.Pageable;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;

    import java.time.LocalDate;
    import java.time.LocalDateTime;
    import java.util.List;
    import java.util.Map;
    import java.util.NoSuchElementException;


    @RestController
    @RequestMapping("/api/lapangan")
    public class LapanganController {

        @Autowired
        private LapanganService lapanganService;


        private static final Logger logger = LoggerFactory.getLogger(ReportEvaluasiService.class);



        @PostMapping("/create-fase") // use
        public ResponseEntity<?> createFase(@RequestBody FaseLapangan faseLapangan) {
            try {
                FaseLapangan createdFaseLapangan = lapanganService.createFase(faseLapangan);
                return ResponseEntity.status(HttpStatus.CREATED).body(createdFaseLapangan);
            } catch (DuplicateEntryException e) {
                return ResponseEntity.status(HttpStatus.CONFLICT).body(e.getMessage());
            }
        }

        @PostMapping("/create-kriteria") //use
        public ResponseEntity<?> addKriteriaToPhase(@RequestBody KriteriaDTO kriteriaDTO) {
            try {
                KriteriaLapangan savedKriteriaLapangan = lapanganService.addKriteriaToPhase(kriteriaDTO);
                // Update ID in DTO with the ID generated by database
                kriteriaDTO.setId(savedKriteriaLapangan.getId());
                return ResponseEntity.status(HttpStatus.CREATED).body(kriteriaDTO);
            } catch (DuplicateEntryException e) {
                return ResponseEntity.status(HttpStatus.CONFLICT).body(e.getMessage());
            }
        }


        @PostMapping("/create-subkriteria") // use
        public ResponseEntity<?> addSubKriteriaToKriteria(@RequestBody SubKriteriaDTO subKriteriaDTO) {
            try {
                SubKriteriaLapangan subKriteriaLapangan = lapanganService.addSubKriteriaToKriteria(subKriteriaDTO);
                // Update ID in DTO with the ID generated by database
                subKriteriaDTO.setId(subKriteriaLapangan.getId());
                return ResponseEntity.status(HttpStatus.CREATED).body(subKriteriaDTO);
            } catch (DuplicateEntryException e) {
                return ResponseEntity.status(HttpStatus.CONFLICT).body(e.getMessage());
            }
        }

        @PostMapping("/create-pertanyaan-jawaban") //use
        public ResponseEntity<?> createPertanyaanDanJawaban(@RequestBody PertanyaanDTO request) {

            try {
                PertanyaanDTO pertanyaanDTO = lapanganService.createPertanyaanDanJawaban(request);
                return ResponseEntity.status(HttpStatus.CREATED).body(pertanyaanDTO);

            } catch (DuplicateEntryException e) {
                return ResponseEntity.status(HttpStatus.CONFLICT).body(e.getMessage());

            }
        }
        @GetMapping("/list-pertanyaan") // use
        public PageResponse<List<SubKriteriaDTO>> getSubKriteriaWithPertanyaanAndJawaban(
                @RequestParam String type,
                @RequestParam(defaultValue = "0") int page,
                @RequestParam(defaultValue = "1") int size) {
            return lapanganService.getSubKriteriaByTypeWithPertanyaanAndJawaban(type,page, size);
        }

        @GetMapping("/evaluasi-by-penilai") // use
        public List<HasilEvaluasiDTO> getEvaluasiLapanganByUser(@RequestParam Long userId, @RequestParam Long teamId, @RequestParam Long eventId) {
            return lapanganService.getEvaluasiLapanganByUser(userId, teamId, eventId);
        }

        @PostMapping("/create-evaluasi") // use
        public ResponseEntity<?> saveAllEvaluasiLapangan(@RequestBody List<DetailEvaluasiLapangan> evaluasiList, @RequestParam Long teamId) {
            try {
                List<DetailEvaluasiLapangan> savedEvaluasiList = lapanganService.saveAllEvaluasiLapangan(evaluasiList, teamId);
                return ResponseEntity.ok(savedEvaluasiList);
            } catch (IllegalArgumentException e) {
                return ResponseEntity.badRequest().body(e.getMessage());
            } catch (Exception e) {
                return ResponseEntity.status(500).body("An unexpected error occurred");
            }
        }

        @PutMapping("/update") // Use
        public ResponseEntity<List<DetailEvaluasiLapangan>> updateEvaluasiLapangan(@RequestBody List<DetailEvaluasiLapangan> updatedEvaluasiList) {
            try {
                List<DetailEvaluasiLapangan> updatedEvaluasi = lapanganService.updateEvaluasiLapangan(updatedEvaluasiList);
                return ResponseEntity.ok(updatedEvaluasi);
            } catch (Exception e) {
                return ResponseEntity.badRequest().body(null);
            }
        }
            @GetMapping("/all")
        public ResponseEntity<?> getAllLapanganData() {
            try {
                return new ResponseEntity<>(lapanganService.getAllLapanganData(), HttpStatus.OK);
            } catch (Exception e) {
                return new ResponseEntity<>("Failed to retrieve lapangan data", HttpStatus.INTERNAL_SERVER_ERROR);
            }
        }


        @GetMapping("/questions")
        public ResponseEntity<List<FaseLapanganDTO>> getAllFaseLapangan() {
            List<FaseLapanganDTO> faseLapanganList = lapanganService.getAllQuestions();
            return ResponseEntity.ok(faseLapanganList);
        }

        @PutMapping("/fase/{id}")
        public ResponseEntity<String> updateFaseLapangan(@PathVariable Long id,
                                                         @RequestParam(required = false) String name,
                                                         @RequestParam(required = false) Boolean active
        ) {
            lapanganService.updateFaseLapangan(id, name, active);
            return ResponseEntity.ok("FaseLapangan updated successfully");
        }

        @PutMapping("/kriteria/{id}")
        public ResponseEntity<String> updateKriteriaLapangan(@PathVariable Long id,
                                                         @RequestParam(required = false) String name,
                                                         @RequestParam(required = false) Boolean active
        ) {
            lapanganService.updateKriteriaLapangan(id, name, active);
            return ResponseEntity.ok("FaseLapangan updated successfully");
        }

        @PutMapping("/subKriteriaLapangan/{id}")
        public ResponseEntity<String> updateSubKriteriaLapangan(@PathVariable Long id,
                                                         @RequestParam(required = false) String name,
                                                         @RequestParam(required = false) Boolean active
        ) {
            lapanganService.updateSubKriteriaLapangan(id, name, active);
            return ResponseEntity.ok("FaseLapangan updated successfully");
        }

        @PutMapping("/pertanyaan/{id}")
        public ResponseEntity<String> updatePertanyaanLapangan(@PathVariable Long id,
                                                         @RequestParam(required = false) String name,
                                                         @RequestParam(required = false) Boolean active
        ) {
            lapanganService.updatePertanyaanLapangan(id, name, active);
            return ResponseEntity.ok("FaseLapangan updated successfully");
        }

        @PutMapping("/point/{id}")
        public ResponseEntity<String> updatePointLapangan(@PathVariable Long id,
                                                         @RequestParam(required = false) String name,
                                                         @RequestParam(required = false) Boolean active)
        {
            lapanganService.updatePointLapangan(id, name, active);
            return ResponseEntity.ok("FaseLapangan updated successfully");
        }


        @GetMapping("/evaluation-list")
        public ResponseEntity<PageResponse<List<EvaluasiLapanganDTO>>> getAllDetailEvaluasiLapanganBySearchTerm(
                @RequestParam(value = "search", defaultValue = "") String search,
                @RequestParam(value = "page", defaultValue = "1") int page,
                @RequestParam(value = "size", defaultValue = "10") int size
        ) {
            try {
                // Validasi parameter page dan size
                if (page < 1) {
                    page = 1;
                }

                Pageable pageable = PageRequest.of(page - 1, size);
                Page<EvaluasiLapanganDTO> result = lapanganService.getDetailEvaluasiLapanganBySearchTerm(search, pageable);

                // Membuat PageResponse dari hasil pagination
                PageResponse<List<EvaluasiLapanganDTO>> response = new PageResponse<>(
                        result.getContent(),
                        result.getNumber() + 1, // Menggunakan 1-based index
                        result.getTotalPages(),
                        result.getSize(),
                        result.getTotalElements()
                );

                return ResponseEntity.ok(response);
            } catch (NoSuchElementException ex) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(new PageResponse<>(null, page, 0, size, 0));
            } catch (IllegalArgumentException ex) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new PageResponse<>(null, page, 0, size, 0));
            } catch (Exception ex) {
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(new PageResponse<>(null, page, 0, size, 0));
            }
        }

        @GetMapping("/attributes")
        public ResponseEntity<?> getDetailEvaluasiAttributes() {
            try {
                Map<String, Object> detailAttributes = lapanganService.getEvaluasiLapanganAttributes();
                return ResponseEntity.ok(detailAttributes);  // 200 OK dengan data
            } catch (Exception e) {

                return ResponseEntity
                        .status(HttpStatus.INTERNAL_SERVER_ERROR)  // 500 Internal Server Error
                        .body("Error retrieving detail evaluasi attributes: " + e.getMessage());
            }
        }

        @GetMapping("/detail-evaluation")
        public ResponseEntity<?> getDetailEvaluasi(
                @RequestParam Long teamId,
                @RequestParam Long userId,
                @RequestParam Long eventId,
                @RequestParam LocalDateTime createdAt) {
            try {
                List<DetailEvaluasiLapanganDTO> detailEvaluasi = lapanganService.getDetailEvaluasi(teamId, userId, eventId, createdAt);

                return new ResponseEntity<>(detailEvaluasi, HttpStatus.OK);
            } catch (ResourceNotFoundException e) {
                return new ResponseEntity<>("Data tidak ditemukan", HttpStatus.NOT_FOUND);
            } catch (Exception e) {
                return new ResponseEntity<>("Terjadi kesalahan: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
            }
        }


        @PutMapping("/update-scores")
        public ResponseEntity<?> updateMultipleScores(@RequestBody List<DetailEvaluasiLapangan> evaluations) {
            try {
                lapanganService.updateScoreLapangan(evaluations);
                return ResponseEntity.ok("Scores updated successfully");
            } catch (Exception e) {
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error updating scores");
            }
        }
    }
